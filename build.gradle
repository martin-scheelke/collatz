buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    dependencies {
        classpath "org.jooq:jooq-codegen:3.13.1"
        classpath "org.postgresql:postgresql:42.2.12"
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id "org.flywaydb.flyway" version "6.4.0"
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

group 'org.martin'
version '1.0'

sourceCompatibility = 1.11

test {
    useJUnitPlatform()
}

ext {
    generatedDir = file("$buildDir/generated-src/jooq/")
}

flyway {
    url = 'jdbc:postgresql://127.0.0.1:5432/postgres'
    user = 'postgres'
    password = ''
    baselineOnMigrate = true
    outOfOrder = true
    locations = ["filesystem:/dbscripts/"]
}

task runREST(type: JavaExec) {
    group = "Run"
    description = 'Starts the REST Service'
    classpath = sourceSets.main.runtimeClasspath
    main = "collatz.restapi.RestController"
}

dependencies {
    compile group: 'com.zaxxer', name: 'HikariCP', version: '3.4.3'
    compile group: 'org.jooq', name: 'jooq', version: '3.13.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile group: 'org.flywaydb', name: 'flyway-core', version: '6.4.0'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.0'
    compile group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: '1.3.72'
    compile group: 'com.sparkjava', name: 'spark-core', version: '2.9.1'

    testCompile group: 'io.rest-assured', name: 'rest-assured', version: '4.3.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

sourceSets {
    main {
        java {
            srcDirs += generatedDir
        }
    }
}

clean {
    delete generatedDir
}

//test {
//   if (project.hasProperty('excludeTests')) {
//        exclude project.property('excludeTests')
//    }
//}  -- gradle test -PexcludeTests=**/Legacy*

/*
task jooqgen doLast {
    def writer = new StringWriter()
    def xml = new groovy.xml.MarkupBuilder(writer)

            .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.13.0.xsd') {
                jdbc() {
                    driver('org.postgresql.Driver')
                    url('jdbc:postgresql://127.0.0.1:5432/postgres')
                    user('postgres')
                    password('')
                }
                generator() {
                    database() {
                        name("org.jooq.meta.postgres.PostgresDatabase")
                        inputSchema("public")
                    }
                    
                    generate([:]) {
                        relations true
                        deprecated false
                        records true
                        immutablePojos true
                        fluentSetters true
                    }
                    target() {
                        packageName('collatz.db')
                        directory(generatedDir)
                    }
                }
            }
    org.jooq.codegen.GenerationTool.generate(writer.toString())
}

compileJava {
    dependsOn jooqgen
}
*/



